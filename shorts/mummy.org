

* Mummy
: NB. R ←  ((V ι V ) = ι  ρ V) / V

# show "APL: a glimpse of heaven." scroll down.
http://archive.vector.org.uk/art10011550
According to Bernard Legrand, this APL phrase
is so common that users parse it as a single word.
** sub-headline
# R ← ((VιV)=ιρV)/V
"just like the word “MUMMY” is fixed in our mind
without having to read and interpret it letter by letter"
** new headline
* literal translation
: . ___? ?_? ?_? ?_? ?__?R?__? ?__?=?__?:?_? ?__?()?__h__?(?_?)?__h__?V?__? ?_?i?_?.?_? ?__?V?__? ?__X__l__? ?_?=?_? ?__?i?_?.?_? ?__?#?_? ?__?V?__$__? ?__?#?_? ?__?v?__X__?V?
:     R =: ((V i. V) = i. # V) # V
: 
* narrative

J descends from APL, and while it's clear how the symbols translate,
I'd never seen this pattern before in J.

It's some operation on a vector v being assigned to R.

We don't need the assignment:

: . kk_0___x__x_x_x_x_x_x_x__x__$
: ((V i. V) = i. # V) # V
: 

But do need to define v:
: . kk__? ?__?=: i.? _ ?10?
: ((V i. V) = i. # V) # V =: i. 10
: 

only that did nothing:

: V
: 

* Investigating

** i.
So let's see. The indices of V in V
are the first occurrences of the elements.

: . ?V?_? i.?_? V?
: V i. V
: 

It's more useful if the input has duplicates:

: . kk___? ?__?=?__?:?_? ?__?'?__?M?_?i?_?s?_?s?_?i?_?s?_?s?_?i?__?p?_?p?_?i?_?'?
: V i. V =: 'Mississippi'
: 

** i. #
Counting up to the length of V just gives an index.

: . ?i.?_? #?_? V?
: i. # V
: 

When you ask where the /first/ index equals the index,
you get this bitmask:

: . kk_0?(?_?V ?_?i.?_? V?_?)?_? = ?
: (V i. V) = i. # V
: 

And now it's obvious why you never see this idiom in J.

** ~:
That operation is so common, it's assigned to a primitive.
It's called the nub sieve.

: . ?~?_?:?_? V?
: ~: V
: 

Using it to copy the items of V yields the nub:

: . kk_0_?(?_$?)?_?# ?T_? ?_?V?
: (~: V) # V
: 

** ~.
And J has a word for that too:

: . ?~.?_? V?
: ~. V
: 

** neat
What good is the sieve?
It's great when you use one list to select from others,
like when filtering multiple columns in a database:

: . kk__kk_$_X?'ne?_?a?_?r?_?s?_?i?__?ght?__?e?_?d'?
: (~: V) # 'nearsighted'
: 

** jumbles

# highlight "Is the language readable?" on-screen, and
# "a linear function of a variable is equal to the sum
# of a constant and of the product of a variable and a second constant”.

As Legrand implies, symbolic notation evolves to
express common patterns more concisely.

You'd never use this jumble of English words
to express the general formula for a line.

But you also never need to use
this jumble of J words
to express the nub:

:                ((V i. V) = i. $ V) # V

:                ~. V

* end
