
* flat vectors

* why not use flat vectors?
- feels messy when you have a bunch of parallel vectors (columns)
  and you do frequent inserts/deletes


* simple boxed trees:
- every value is a leaf
- every leaf is a value
- boxes themselves are the nodes
- internal nodes have no distinguishing attributes
  (other than their contents)

* 'tagged' trees (algebraic data types)
- values are tagged with constructor symbols
  the tags are necessary /at runtime/ for dispatch.
- values can be nested acording to production rules
  (t  -> t)
  (t? -> Maybe t)
  (t* -> [t])
  (t+ -> (t, [t])
- so, these trees require internal nodes to have attributes
  - techniques that work for plain boxes won't work here


* how to handle an AST (DOM-like) tree?

-triples of tag,attrs,values

: require 'tangentstorm/syndir/parseco'
: [ast=:3{. ts se on '(a (b c) (d (e f) g h))'
┌┬──┬─────────────────────────────────────────────────────┐
││  │┌───────────────────────────────────────────────────┐│
││  ││┌───┬──┬──────────────────────────────────────────┐││
││  │││┌─┐│  │┌────────────┬───────────────────────────┐│││
││  ││││a││  ││┌───┬──┬───┐│┌───┬──┬──────────────────┐││││
││  │││└─┘│  │││┌─┐│  │┌─┐│││┌─┐│  │┌────────────┬─┬─┐│││││
││  │││   │  ││││b││  ││c│││││d││  ││┌───┬──┬───┐│g│h││││││
││  │││   │  │││└─┘│  │└─┘│││└─┘│  │││┌─┐│  │┌─┐││ │ ││││││
││  │││   │  ││└───┴──┴───┘││   │  ││││e││  ││f│││ │ ││││││
││  │││   │  ││            ││   │  │││└─┘│  │└─┘││ │ ││││││
││  │││   │  ││            ││   │  ││└───┴──┴───┘│ │ ││││││
││  │││   │  ││            ││   │  │└────────────┴─┴─┘│││││
││  │││   │  ││            │└───┴──┴──────────────────┘││││
││  │││   │  │└────────────┴───────────────────────────┘│││
││  ││└───┴──┴──────────────────────────────────────────┘││
││  │└───────────────────────────────────────────────────┘│
└┴──┴─────────────────────────────────────────────────────┘

- top level is a 'node' : (tag,dict,children)
- children are either nodes or tokens (strings)
- there is no explicit tag, just "is it an array of 3 boxes?"
: isnode =: (#=3) *. 'boxed'-:datatype

So, how to get a list of nodes, or list of paths to the nodes?

- {:: only gives us leaves, so we can't detect the tagged structures

- top level path is just ''

:   ast -: ''{:: ast
: 1

the next paths are 0 1 2 (just a count to the length, boxed at level 0 with ;/ or <"0)

:    ('';;/@i.@#) ast
┌┬─┬─┬─┐
││0│1│2│
└┴─┴─┴─┘

well, except we want our paths to be lists, and those are scalars:

:   $ each ('';;/@i.@#) ast
┌─┬┬┬┐
│0││││
└─┴┴┴┘

so instead:

:   ('';;/@,.@i.@#) ast
┌┬─┬─┬─┐
││0│1│2│
└┴─┴─┴─┘

:   $ each ('';;/@,.@i.@#) ast
┌─┬─┬─┬─┐
│0│1│1│1│
└─┴─┴─┴─┘

... except that's not right either, because we don't want to visit every
/part/ of the node, just the 'children' part. so really the first two nodes are:

: '';,2


We now  probably make this into a queue:

#+begin_src j
  require '~/ver/syndir/parseco.ijs'
  ast =: 3{. ts se on '(a (b c) (d (e f) g h))'
  isnode =: (3=#) *. 'boxed'-:datatype
  paths =: {{
    r=. ,a: NB. result. path to top is always '', and  '' -: > a:
    i=. 0
    while. i<#r do.   NB. r will grow!
     NB. every item in r is guaranteed to be a path to a node
     c =. (p=.>i{r){::y   NB. c = contents of node i{r in y
     for_cn. 2{::c do.
        if. isnode >cn do. r =. r,<p,2;cn_index end.
     end.
     i=.i+1
    end.
    r }}
  dbg 1
  paths ast

#+end_src

this seems to work:
:   paths ast
┌┬─────┬─────────┬─────────┬─────────────┐
││┌─┬─┐│┌─┬─┬─┬─┐│┌─┬─┬─┬─┐│┌─┬─┬─┬─┬─┬─┐│
│││2│0│││2│0│2│0│││2│0│2│1│││2│0│2│1│2│0││
││└─┴─┘│└─┴─┴─┴─┘│└─┴─┴─┴─┘│└─┴─┴─┴─┴─┴─┘│
└┴─────┴─────────┴─────────┴─────────────┘

** the full tree walk
#+begin_src j
   ,.(paths ast) {:: each  <ast
┌───────────────────────────────────────────────────────────┐
│┌┬──┬─────────────────────────────────────────────────────┐│
│││  │┌───────────────────────────────────────────────────┐││
│││  ││┌───┬──┬──────────────────────────────────────────┐│││
│││  │││┌─┐│  │┌────────────┬───────────────────────────┐││││
│││  ││││a││  ││┌───┬──┬───┐│┌───┬──┬──────────────────┐│││││
│││  │││└─┘│  │││┌─┐│  │┌─┐│││┌─┐│  │┌────────────┬─┬─┐││││││
│││  │││   │  ││││b││  ││c│││││d││  ││┌───┬──┬───┐│g│h│││││││
│││  │││   │  │││└─┘│  │└─┘│││└─┘│  │││┌─┐│  │┌─┐││ │ │││││││
│││  │││   │  ││└───┴──┴───┘││   │  ││││e││  ││f│││ │ │││││││
│││  │││   │  ││            ││   │  │││└─┘│  │└─┘││ │ │││││││
│││  │││   │  ││            ││   │  ││└───┴──┴───┘│ │ │││││││
│││  │││   │  ││            ││   │  │└────────────┴─┴─┘││││││
│││  │││   │  ││            │└───┴──┴──────────────────┘│││││
│││  │││   │  │└────────────┴───────────────────────────┘││││
│││  ││└───┴──┴──────────────────────────────────────────┘│││
│││  │└───────────────────────────────────────────────────┘││
│└┴──┴─────────────────────────────────────────────────────┘│
├───────────────────────────────────────────────────────────┤
│┌───┬──┬──────────────────────────────────────────┐        │
││┌─┐│  │┌────────────┬───────────────────────────┐│        │
│││a││  ││┌───┬──┬───┐│┌───┬──┬──────────────────┐││        │
││└─┘│  │││┌─┐│  │┌─┐│││┌─┐│  │┌────────────┬─┬─┐│││        │
││   │  ││││b││  ││c│││││d││  ││┌───┬──┬───┐│g│h││││        │
││   │  │││└─┘│  │└─┘│││└─┘│  │││┌─┐│  │┌─┐││ │ ││││        │
││   │  ││└───┴──┴───┘││   │  ││││e││  ││f│││ │ ││││        │
││   │  ││            ││   │  │││└─┘│  │└─┘││ │ ││││        │
││   │  ││            ││   │  ││└───┴──┴───┘│ │ ││││        │
││   │  ││            ││   │  │└────────────┴─┴─┘│││        │
││   │  ││            │└───┴──┴──────────────────┘││        │
││   │  │└────────────┴───────────────────────────┘│        │
│└───┴──┴──────────────────────────────────────────┘        │
├───────────────────────────────────────────────────────────┤
│┌───┬──┬───┐                                               │
││┌─┐│  │┌─┐│                                               │
│││b││  ││c││                                               │
││└─┘│  │└─┘│                                               │
│└───┴──┴───┘                                               │
├───────────────────────────────────────────────────────────┤
│┌───┬──┬──────────────────┐                                │
││┌─┐│  │┌────────────┬─┬─┐│                                │
│││d││  ││┌───┬──┬───┐│g│h││                                │
││└─┘│  │││┌─┐│  │┌─┐││ │ ││                                │
││   │  ││││e││  ││f│││ │ ││                                │
││   │  │││└─┘│  │└─┘││ │ ││                                │
││   │  ││└───┴──┴───┘│ │ ││                                │
││   │  │└────────────┴─┴─┘│                                │
│└───┴──┴──────────────────┘                                │
├───────────────────────────────────────────────────────────┤
│┌───┬──┬───┐                                               │
││┌─┐│  │┌─┐│                                               │
│││e││  ││f││                                               │
││└─┘│  │└─┘│                                               │
│└───┴──┴───┘                                               │
└───────────────────────────────────────────────────────────┘
#+end_src



* how to get the items of a boxed tree in order?

: <@;S:1 {::T

{:: provides the indices in-place
then  <@;S:1 converts these to boxes
