#+title: unrolling an array
# maybe part of a "tacit control flow in j" talk?

* How would you go about solving this the J way?
jc52776 — Today at 1:05 AM
I've used a while statement to solve it.
But I was thinking is there a solution using the power operator (^:)?
NB. https://www.codewars.com/kata/521c2db8ddc89b9b7a0000c1/train/python
NB. Given an n x n array, return the array elements arranged from outermost elements to the middle element, traveling clockwise.
NB. array = [[1,2,3],
NB.          [4,5,6],
NB.          [7,8,9]]
NB. snail(array) #=> [1,2,3,6,9,8,7,4,5]

snail =: monad define
v =. 0 $ 1
while. (0 < $ y) do.
v =. v,{.y
y =. |. |: }. y
end.
v
)
snail 3 3 $ >: i.9 NB. 1 2 3 6 9 8 7 4 5
 (edited)

1

* Bubbler — Today at 1:18 AM
I have 0 >@{ ] {{ (x,{.y) ; |.|:}.y }}&>/@[ ^: (2*#@[) a:,<

* razetime
BOT
 — Today at 1:18 AM
Using this paper's spiral function you can generate the indices to unravel and index into it
spiral =: ,~ $ [: /: }.@(2 # >:@i.@-) +/\@# <:@+: $ (, -)@(1&,)
snail =:{{(,spiral {. $ y) }~, y}} 

* Bubbler — Today at 1:18 AM
Not easy because there are two moving parts

* jc52776 — Today at 2:02 AM
Thanks I get most of that. I'm a lost at the &>/ part. And dissect can't seem to help me here  .  Assuming right arg is 
3 3 $ >: i.9
 then first go through I think oh that must do 
0 1 2;(|.|:}.3 3 $ >: i.9) >/ (a:,< 3 3 $ >: i.9)
 . But obviously I'm wrong (as that errors). Any chance you can explain to me what the &>/ part is doing. Thanks (edited)

* Bubbler — Today at 2:06 AM
First, a:,< is creating an array that will contain the two moving parts (the processed part of the answer and the remaining part of input)
[2:08 AM]
Then {{ ... }}&>/ unboxes the two boxes and passes them to the direct function {{ ... }} as x and y respectively
[2:08 AM]
Also it parses as ({{ ... }}&>)/
[2:10 AM]
So it means (from the outside): "reduce over the two boxes; unbox both sides; pass them to the function"

* jc52776 — Today at 2:15 AM
Great explanation thank you. Knowing it's evaluated as 
({{...}}&>)/
 really helped. Seems obvious now but that seems to be the J way. It's like I dont get it but once I do I cant miss it. It  is beautiful code you've provided. Much appreciated. (edited)

* DiscoDoug — Today at 2:18 AM
The spiral came up in the apl room in May.  In K: sp:{(x,x)#(!#g)@<g:+\0,,/((#s)#1 1 -1 -1)*((#s)#1,x)*s:1|&:'&0,((x-2)#2),3}  Can probably be golfed.
[2:24 AM]
The idea is to list out the steps to take in 2d coordinates.  The running sum of the steps is the position at that point in the path.  Then grade sorts them by the order they appear the in result so you can apply that grade to the list of indices.
[2:26 AM]
Instead of 2d coordinates you can use numbers base (height,width).
[2:28 AM]
This last is the difference between Tuttle’s solution and Knuth et all in the paper @(please ping my matrix) cited. (edited)

* tangentstorm — Today at 1:09 PM
@jc52776 how about this:
({. ; $:@|.@|:@}.)^:(1<#) 1+i. 3 3
[1:11 PM]
it says: if the length is > 1 then take the first row and append it to (recursive call of same function after beheading and rotating the result counterclockwise) (edited)
[1:15 PM]
(if the length is <=1 then it returns the input unchanged)

* South — Today at 1:26 PM
that’s really nice

* tangentstorm — Today at 1:55 PM
hrm. actually that one has shape 1 1 in the last box, so it's not easy to unravel. using @. instead of ^: lets you choose between two functions instead of a function and the identity... so this gives the actual list you want without any boxing:

#+begin_src j
: ,`({. , $:@|.@|:@}.)@.(1<#) 1+i. 3 3
#+end_src


* DoT — Yesterday at 11:43 PM  [calculating the indices]
Given an nxn matrix, we can calculate the indices of the spiral's snail with: 
a=: _1,n
b=: 1,-n
+/\(n#1), ((n-1)#a), ((n-2)#b), ((n-3)#a), ((n-4)#b), ... until (n-i)=1, then replacing the first item with 0.

For example:
   ]m=: i.5 5
 0  1  2  3  4
 5  6  7  8  9
10 11 12 13 14
15 16 17 18 19
20 21 22 23 24
    
   ]mi=: +/\|.(1#1 _5),(2#_1 5),(3#1 _5),(4#_1 5), (0,~ }:) (5#1)
0 1 2 3 4 9 14 19 24 23 22 21 20 15 10 5 6 7 8 13 18 17 16 11 12

   mi { , m
0 1 2 3 4 9 14 19 24 23 22 21 20 15 10 5 6 7 8 13 18 17 16 11 12
   
I haven't been successful golfing mi without looping or recursion, but I have a feeling that it's possible.
 (edited)
August 11, 2022

* tangentstorm — Today at 2:08 AM here you go, @DoT :

   <:+/\((<:@+:$[:(,-)1&,)#~[:}.2#>:@i.@-) 5
0 1 2 3 4 9 14 19 24 23 22 21 20 15 10 5 6 7 8 13 18 17 16 11 12
