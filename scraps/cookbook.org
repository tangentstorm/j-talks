* TODO cookbook
** generating arrays

So the promise was that we'd provide some way to control all this with code.
Here's what I had in mind:

#+begin_src j
NB. some nice arrays to look at.
im =: ? 10 10 $ 2            NB. random black/white pattern
im =: ? 100 100 $ 2          NB. higher resolution
im =: i. 10 10               NB. count to 100
im =: |: i. 10 10            NB. same thing, transposed
im =: i. 2 2                 NB. a simple 4-square
im =: j./~ i:10              NB. the complex plane, near the origin
im =: |j./~ i:10             NB. magnitudes from the center
im =: 10 10 $ 1              NB. pure white
im =: 1 (<5 5) } 11 11 $ 0   NB. one white pixel in the middle
im =: ~:/\^:(<@#) 8 # 1      NB. mysterious triangle??
#+end_src

These are just a bunch of lines I came up with.

** transformations
#+begin_src j
NB. operators on the current pattern:
im =: im * i.$im             NB. rainbowfy a black and white image
im =: 2 | im                 NB. reduce color to black and white (using mod 2)
im =: |: im                  NB. transpose
im =: |. im                  NB. flip top to bottom
im =: |."1 im                NB. flip left to right
im =: |: |. im               NB. rotate 90 degrees
im =: |. |: im               NB. rotate the other way
im =: -. im                  NB. flip the bits
im =: ,~ ,.~ im              NB. split into four copies
im =: (,|.) (,. |."1) im     NB. four copies, but mirrored across each axis
im =:  1 |. im               NB. rotate up (top row moves to bottom)
im =: _1 |. im               NB. rotate down
im =:  1 |."1 im             NB. rotate left
im =: _1 |."1 im             NB. rotate right
im =: }. im , 0              NB. shift up, pad with 0
im =: 0 , }: im              NB. shift down, pad with 0
im =: }."1 im ,. 0           NB. shift left, pad with 0
im =: 0 ,. }:"1 im           NB. shift right, pad with 0
#+end_src

you can experiment with running these lines interactively with ctrl-enter,
or ctrl-r which runs the line without advancing the cursor (so you can run it over and over again)

before i end, i should point out that while I was typing these, i'd occasionally
screw something up and set im to something that wasn't a 2d matrix.
This caused a modal error message to pop up on every frame, so that
and so every time I closed the message it popped right back up.

The only way to recover was to kill J, which was really annoying.
So to fix that, I added some trapping for this in the render verb:

#+begin_src j
render =: verb define
  if. 2 = #$ im            NB. only render if im is a 2d array
  do. vmcc im;'g0' end.    NB. (this avoids infinite error boxes)
)
#+end_src



