* Amend

The operation is called amend. The way to remember what's happening is that when
'from' (left curly) takes something out of an array, it points away.
Amend puts something into the array and it takes two arguments on the left to tell it what and where.
So 'from' is a dyadic verb, and 'amend' is an adverb that takes the position and returns a dyadic verb.

Amend is something you'll do all the time, so lets pause a minute and do a simpler example.

Suppose you have a grid like
** Amend
#+begin_src j
  i. 3 5
#+end_src

Then the coordinates of the seven are one down and two to the right.
Then we can replace the seven with infinity like this:
** Amend
#+begin_src j
  _ (<1 2) } i. 3 5
#+end_src
The reason we box 1 2 is because we can assign multiple positions at once, and we need some way to distinguish pairs of coordinates from pairs of items. The items of a matrix are its rows, so without the box, it replaces the entirety of rows one and two. Likewise, if we want to replace two different individual cells, we can pass in two boxes.
** Amend

#+begin_src j
  _ (0 0; 1 2) } i. 3 5
#+end_src

Semicolon is called link. Roughly speaking, it boxes its arguments and combines them into an array.
More precisely, it boxes x and then boxes y unless y is already boxed. That way you can use it as a separator
and not wind up with nested boxes.

* boxing
** boxing
Why is it called boxing?

Well...

#+begin_src j
 0 0 ; 1 2
#+end_src

** boxing
Partially because J draws it as a box...

#+begin_src j
  < 0 0 ; 1 2
#+end_src

And also because every value in an array has to have the same type in J.
You can't have an array that contains both numbers and characters:

But you can have an array with two boxes, regardless of what's inside them.

Anyway, to recap, boxing is also the way to amend an array at particular coordinates, and that's what we're doing in mousedraw. So now, we can click to our heart's content and draw with our pen in the grid.
