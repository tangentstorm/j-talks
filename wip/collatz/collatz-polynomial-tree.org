#+title: collatz polynomial tree

* binary tree of polynomials
:PROPERTIES:
:TS:       <2022-06-02 03:47AM>
:ID:       zfhis4l04hj0
:END:

- slope will never be negative because all we can do is
  - multiply by 3, and add 1
  - divide by 2

- f=x (which captures all initial values)
  - fo=x/2  (intersects y=x at 0 0)
    no further branching, because fo<f for all x>0
  - fi=3x+1 (intersects at _1r2 _1r2)
    - fio=(3x+1)/2 . intersects at _1
      - fioo=(3x+1)/4 . intersects at 1, goes below.
      - fioi=3((3x+1)/2)+1 -> _5r7, crossing above
             1 + 3 * -: 1 + 3 * ]
             1 + 3 * 1r2 * 1 + 3 * ]
             1 + 3 * 1r2     + 3r2 * ]
             1 + 3r2 + 9r2 * ]
             2r2 + 3r2 + 9r2 * ]
             5r2 + 9r2 * ]

            x = (5 + 9x)/2
            2x = 5 + 9x

           -7x = 5
             x = -5/7

    - fii=4+9x . intersects at _1r2


* solving
#+begin_src j
f =: 0 1x  NB. y=x
o =: {{ -: m }}
i =: {{ 1 0 + 3 * m }}
NB. s solves for the intersection with y=x
s =: {{ b % d-mx ['b mx' =. y * d=. %+./y }}
#+end_src

* finding the intersections:

#+begin_src j
   (;s) f
┌───┬─┐
│0 1│0│
└───┴─┘
   (;s) f o
┌─────┬─┐
│0 1r2│0│
└─────┴─┘
   (;s) f i
┌───┬────┐
│1 3│_1r2│
└───┴────┘
   (;s) f i o
┌───────┬──┐
│1r2 3r2│_1│
└───────┴──┘
   (;s) f i i
┌───┬────┐
│4 9│_1r2│
└───┴────┘
#+end_src


* so what do you do with it?
- any time s evaluates to an integer, that integer is part of a cycle
- the o/i symbols represent the path the number takes through the binary tree, and also the length of the cycle.
  - o=0=lo,i=1=hi ... we could also use  (e,o) for even/odd

- two lines can only cross at a single point, if at all
- so each line we reach must have either 0 or 1 solutions

- each node in the binary tree represents *one* number that cycled
- but most of the time it won't be an integer, so we have to discard it.
- every item in a cycle must have the same cycle length
- so every item in a cycle has to exist on the same row of the binary tree.


- but we only need to find one element of the cycle
- every cycle must have a lowest point, so let's look for that.

- any time a line intersects y=x and crosses *under* y=x
  - we can discard all value to the right of the intersection, because they mean all those values got smaller than the starting condition, so the starting condition could not be the "minimal criminal" in the cycle.

  - this allows us to either:
    - trim child nodes completely (if the intersection is left of the y axis, since we only care about positive numbers)
    - or, put an upper bound on the starting integers below that point in the tree. (any time the upper bound is within the range that's been checked manually, then we can discard that branch as well.)

- we know that cycles are very long (if they exist), so we should probably dig quite deep rather than trying to do a breadth first search.


- it might be interesting, however, to plot each row of the tree, and see if we can come up with a formula for the rows, or see any patterns in the (mx,b) pairs or the intersections.

(note that the intersections are against y=x, so even though they're points, we can just think of them as individual numbers, since it's always some point (n,n) for an integer n.
1q


* TODO still a bug?
something seems wrong here.

i wrote this line, which should generate an entire row of the  binary tree  for some y:

#+begin_src j
   "."1 '(s) f',"1 ;"1(' o';' i'){~#:i.2^y=.8
0 128r125 64r125 256r55 32r125 32r11 128r55 416r5 16r125 112r55 16r11 272r5 64r55 224r5 208r5 _128r13 8r125 8r5 56r55 40 8r11 152r5 136r5 _424r65 32r55 128r5 112r5 _352r65 104r5 _328r65 _64r13 _968r235 4r125 76r55 4r5 164r5 28r55 116r5 20 _316r65 4r11 92r5...

NB. and then filter out non-integers:
(#~]=<.) "."1 '(s) f',"1 ;"1(' o';' i'){~#:i.2^y=.8
0 40 20 16 10 _2 8 13 5 _1 4

#+end_src

... but this includes things that are clearly not part of new cycles.

(hopefully this is just because i haven't implemented the pruning yet for items that go below the y=x line?)

