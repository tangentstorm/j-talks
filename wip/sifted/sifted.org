#+title: formalizing a theorem about primes
* the sieve of eratosthenes

Write out the natural numbers starting from 1, up to any upper bound you like.
Strike out the 1.

Then repeat the following two steps.
- Circle the smallest number you haven’t marked up yet.
- Then strike out all the multiples of that number.

# write out 8x8 grid up to 64

so circle two, then count by twos
circle the three, count by threes -- some of these are already
  marked off but that's okay.
circle the five... again, they're already marked off... in fact
  since to have a multiple of five you have to multiply five by
  something, we could use a little shortcut and just multiply
  five by itself and then by all the other numbers we haven't crossed out.
  five times five
  five times seven
  five times eleven
  five times 13 is seventy five and that's past our upper bound.

same thing with seven.
  seven times seven is 49

eleven squared is 121 and that's already past our upper bound.
the same thing is going to happen for all these numbers, and so
we can just go ahead circle all of them, and we're done.

* formal verification

Provided you didn’t make any mistakes along the way, the numbers
you’ve circled are exactly the prime numbers less than or equal
to 64.

This algorithm is known as the Sieve of Eratosthenes. It’s been
around over 2000 years, and as you can see, it's simple enough to
do by hand.

But how can we prove that it works?

And more specifically, how can we prove it in an modern interactive theorem prover?

I recently implemented a version of this algorithm in Lean, an open
source theorem prover and programming language that’s been gaining
popularity with actual working mathematicians.

It only took a couple hours to learn enough of the programming
language to implement the algorithm, but it took me six weeks
to prove that it works.

For anyone interested in the details, I'll have a link at the end
to another video where I walk through the whole project step by step,
but in this video, I'm going to focus on what I think of as the core
idea of this algorithm.

We're going to prove that if a natural number greater than 1
is not a multiple of a smaller prime, then that number must
be prime.

* live editor and for lean

If you want, you can go to http://live.lean-lang.org and follow
along step by step through this proof.

Okay, so this demo environment, lean, and the math library all
get updated regularly, so the first thing I'm going to do is
check which version I'm using.

: NB. #eval Lean.versionString

If you get a different result,
understand it's possible that some theorem I show you might
have been renamed slightly, but hopefully the steps I use will
still lead you to a valid proof even if it doesn't look exactly
like mine.

* mathlib

Okay, so the first thing we'll do is import Mathlib.

: NB. import Mathlib

It's a massive library full of all kinds of mathematical facts.

This server seems to be happy to load the whole thing, but
on my own local machine this winds up being very slow, so
I tend to just load the part I need.

For this proof, we only really to import the facts about primes:

: NB. import Mathlib.Data.Nat.Prime.Basic

* the proof
** the statement

And now we write what we want to prove.


#+begin_src lean
/- if a number has no prime factors smaller
   than itself, that number is prime. -/
theorem prime_of_sifted
   (c:Nat) (hfac: ∀ p<c, p.Prime → ¬p∣c)
: c.Prime := by sorry

-- how to type the symbols: (don't type the spaces)
--
-- ∀ : \ a l l
-- → : \ r
-- ¬ : \ n o t
-- ∣ : \ |
#+end_src


To me, this statement is the core idea of a prime sieve.
by the time we go to put a circle around c, we've crossed
out the multiples of every prime number less than c.
Therefore, c can't be a multiple of any smaller prime
and ought to be prime itself.


A theorem in lean is very much like a program. It takes
definitions and facts as input, and returns a new fact.

In this case, the input is a natural number called c for
"candidate prime" and a proof that c has no prime factors
smaller than itself. The `h` is for hypothesis. `fac` is for factor.

If we provide those two inputs, we'll get back a proof that
c is prime.


The "by sorry" part says how the proof is constructed. The
word "sorry" is a placeholder. It lets you prove anything,
but lean gives you a warning about it, and in general as
long as you have the word sorry somewhere in your file
you don't really have a valid proof, but lean will
give you back the fact as if you do.

** testing the statement

Okay, so is this statement we can actually prove?

If we've stated it correctly, we ought to be able to
use this to prove that the number seven is prime:

#+begin_src lean
example := prime_of_sifted 7 (by decide)
#+end_src

The decide tactic uses definitons from mathlib to
check whether hfac is true for the number 7 and it is,
so this line is a proof that 7 is prime, but again
not one you can trust because of the word sorry.

If we pass in the number 6, it's unable to produce that fact,
because 2 and 3 are primes smaller than 6 and they both divide 6.

#+begin_src lean
example := prime_of_sifted 6 (by decide)
#+end_src

This is exactly what we want.

And by the way, we can make the proof of hfac a default parameter
so we don't have to write the same thing every time:

: (c:Nat) (hfac: ∀p < c, p.Prime → ¬p∣c := by decide)
: example := prime_of_sifted 7
: example := prime_of_sifted 6

So is our statement good?

Well, what about this?

: example := prime_of_sifted 0

Uh-oh.

: example := prime_of_sifted 1

Our theorem states that 0 and 1 are prime, and since that's
not how the word "prime" is defined, we will never be able
to complete the proof.

The fix is just to add another fact.

: (h2:2≤c := by decide)
: -- \le : \ l e
And now everything's behaving correctly.

You might ask why I wrote 2 less than or equal to c
instead of c greater than 1. The answer is it's just
that I happen to already know Mathlib already tends
to favor the less than or equal to convention.

You might also wonder: if lean can prove things like
hfac automatically with `by decide` could we prove the
whole theorem this way?

: c.Prime := by decide

Nope. It's saying it can't produce statements that have
variables like C in them.

There are some other tactics that try to automatically generate
proofs, but so far none of them are able to prove this yet.

: # replace sorry

** rewriting the goal

If we put the cursor on line 7, right before the word 'sorry'
then the info panel on the right tells us we have a goal.

these lines are the facts that are currently in scope, and the line
with the turnstile is the goal we have to prove.

So the goal is to show =Nat.Prime c= and since =c= is a =Nat= (a natural number)
that's just another way of writing =c.Prime=

So what does it mean to have a goal here?

We can ask lean to show us some of the rules it knows about our goal
by doing a search:

: rw?

And we can see some of the facts about primes tha lean knows.

Proving is a bit like solving a maze. Right now we're at a branch
point, and there's a bunch of different ways we can go.

But in the end you just have to try one, and this is the one I picked.

So that's =Nat.prime_def_lt= (the version with no apostrophes at the
end), and if I click on it, it copies the name of the theorem into the
proof, and rewrites the goal.

: rw [@Nat.prime_def_lt]

It now says we have to prove that C is greater than or equal to two,
and also for any number m less than c, if m divides c then m must be the number
one. Hopefully we can all agree this is a valid definition of a prime.

And so we already have the fact on the left in h2, we can use
the =simp= tactic with that fact to solve that part of the goal.

: simp[h2c]

** show

And by the way, notice that the goal changes as you move the cursor
around. You can us e that to see exactly what changed at each step.

now just to make the proof easier to read,
i'm going to copy this goal over to our proof and put the word show in
front of it.

: show ∀ m < c, m ∣ c → m = 1

In a way, this is like an executable comment. I'm mostly putting it
here to make the proof a little more readable, but it also acts as an
assertion about the state of the proof.

If I try changing this 1 to a 2, it complains, because it doesn't
match the goal:

...

# You are allowed to make small changes, as long as Lean can tell it's
# equivalent. For example, the `m` here is a local variable introduced
# by the forall symbol, so we can change that to something else if we
# like. I'll change it to an n.

: show ∀ n < c, n ∣ c → n = 1

It says for all n less than c, n divides c implies that n = 1.


But we can also think of this statement as the declaration of a
function that takes an argument named n and another argument that is a
proof that n divides c. And then the return type of this function is a
proof than n = 1.

** introducing variables

Okay so how can we prove this?

It says for all n where these two conditions are true, prove n=1. We
could write this as a standalone theorem and give it a name, in which
case the signature would look something like line 4 with names and
types for each argument. (Yes, each proposition is a type.  If you can
produce a value of this type, then that value acts as a proof that the
statement is true.)

Anyway, instead of writing a standalone theorem we can just give names
to the pieces directly.

: NB. intro n hnlc hndc

So now we have a natural number named n in scope, and a proof that n
is less than c, and another proof that n divides c.

And our goal is just to demonstrate from these facts that n must be equal to 1.

** informal proof than n=1

okay, so how do we prove that n=1?

it doesn't make sense to search in mathlib again.
there's probably not some theorem or definition related
to the number 1 that's going to get us somewhere.

So instead we have to resort to thinking.

If you're up for it, you might want to pause the
video and think through this yourself.

...

Okay, if you came up with an idea, great.

There's probably lots of ways we can go, but here's how I did it.

we have: n<c
and also no primes less than c divides c.
but n does divide c, so clearly n is not prime.

what happens if n is a compound number?

pause the video if you like.

the trick is to break n down into its prime

Another way of saying 10 divides c is that c is a multiple of 10. but
every multiple of 10 is divisible by 2 and 5.  But since 2 and 5 are
primes less than 10, and 10 is less than c, that means 2 and 5 are
primes less than c, and we know that primes less than c do not divide
c.

So the argument is that if n is compound, it has a prime factor
which we know does not divide c. and therefore n does not divide c.

But that same argument works if n is prime, because every prime is
divisible by itself.

** mathlib: prime factor

Thankfully, Mathlib already knows that natural numbers greater than
one have a prime factor, so we won't have to prove this.  But we do
have to find it. Earlier we had good luck finding theorems with `rw?`
because the goal was already about primes.

But here there's nothing specifically on screen that would tell the
automation we want to find a theorem about prime factors.

So instead we can search the docs:

: menu-> Lean community
: lean documentation

https://leanprover-community.github.io/mathlib4_docs/
"nat ex prime fac"
and find nothing.
but... "nat ex prime" turns up the thing we want

: have : ∃ p, p.Prime ∧ p ∣ n := by exact?

the search fails because it requires a fact that n is not 1, but we
don't have that fact.

** proof by contradiction

We're actually supposed to be proving the exact opposite.

but that actually works out.

this is called a proof by contradiction.

we're going to prove than n = 1 by assuming that it ISNT equal to one
and then we're going to derive a contradiction.

so there's a tactic for this, called =by_contra=

: NB. by_contra

this is just another tactic that someone defined.

now the goal is changed to false, hypothesis that ¬n=1... you can tell
it's anonymous because the x is greyed out and it hahs this latin
cross character next to it.

the search succeeds, but if we click on the "try this" link to fill in
the proof, it fails because this is not a real name. the fix is to
supply a name for the hypothesis about n to =by_contra= and then use it.

: by_contra hn
# replace x with 'hn' in the expanded tactic


also usually when you see the words =by exact= next to each other, you
can eliminate them.

** obtaining the prime factor

so now we have this statetment that this prime P exists,
but we don't know what it is.

This is a bit like the idea of proving forall n.
With intro n, we asked lean to give us an arbitrary
n so we could prove something about it.

Now we have a proof that this prime p that divides n exists.
We can ask lean to give it to us.

But how can it possibly know what p is if we don't even
know what c is?

The answer is it doesn't matter, because this is all hypothetical.

That's why the names for our facts all have "h"s in front of them.

We're going to bring a new variable called p into our scope,
and literally a hypothesis that p is prime and
another hypothesis that p divides n.

And the way to do this is the obtain tactic.

: obtain ⟨p,hp,hpn⟩ := this

we can consolidate a bit:

#+begin_src lean
  obtain ⟨ p, hp, hpn ⟩ : ∃p, p.Prime ∧ p ∣ n :=
    Nat.exists_prime_and_dvd hn
  -- ∧   : \ a n d
  -- ∃   : \ e x
  -- ⟨⟩  : \ < >
#+end_src

** the contradiction

Since our goal is to prove false, one way we can
get there is to prove a pair of opposing statements

#+begin_src lean
have : p∣c  := by exact?
have : ¬p∣c := by exact?
#+end_src

the "exact" search checks the library for theorems that solve
the goal directly, and collects these search results. if
it fails, it acts like "sorry".

The two different colors of squiggly lines means that exact
proved the first line for us, but the second takes more work.

but now we have both these facts and so we can replace the
sorry with contradiction.

If you hover over it with the mouse you can see for yourself what it does.

** completing the proof

Remember the plan was to derive this from hfac. We know p is
prime, so if we can show p is less than c we can get this fact.

so we can introduce an intermediate fact:

: have : p < c := by exact?

now line 16 succeeds but line 15 fails.

but surely if p divides n and n is less than c, then n is less than
c... right?

well, it's true but lean can't see it. we need to tell lean that p≤n
but it can't prove that either.

the problem is that n might be zero. zero has lots of factors.

: have : 0 < n := by exact?

but how can we prove 0 < n?

we know n is less than c and c is at least 2... so it should be
obvious.

it's true but there's no specific rule we can apply.

we can state that 0 < c expliictly, and suddenly everything works.

and that's it, the proof is complete, but for speed and readability,
reasons you don't want to leave these searches in there.

** cleanup

so expand them all by clicking them and then clicking the try this on
the right.

and then any time we see `by exact` we can remove it.

you can also nest these inside each other if you like to highlight the
structure of the argument.

* closing
- code walkthrough on my other channel
- next step: try the natural numbers game
- questions in the comments
- see you again soon

