#+title: binary signal space

* number line
#+scene: number-line
you remember this from kindergarten

start at zero

one unit the right

then two then three and so on

and negative numbers go off to the left

* digits
#+scene: tens
#+begin_src j
load 'viewmat'
viewmat |: 10 10 10 #: i.200
#+end_src

there's a pattern that repeats

every tenth one we change the second digit

and so you have these groups of ten

* binary number line
#+scene: twos

well with binary numbers, it's the same but you only have two digits.

so you write two in binary the way you write ten in decimal

so a binary number line would look like the normal number line

but it's actually this pattern up here that's more interesting.

* binary tree as decision diagram
#+scene: tree

the mental model is a brute force attempt to solve a boolean expression

you're going to try every single configuration of input bits.

for n input bits there are 2^n possible configurations

you could put them in any order, but since this is how we already count
this is a natural way to number them:

so imagine you're trying to brute force a solution.
you try zeros first
then you try the binary pattern for 1
then for 2
then for 3
and so on

* prime signals
#+scene: twos

so every line of this chart corresponds to the changes in one input bit
over the course of a brute force solution

since we have six input bits in our example
we have six lines
and these six lines are something like primary binary signals.

they're just simple oscillators with a period of 2(^n+1)

so primary signal x0 has a period of 2^1 = 2. (01 01 01 01)

signal x1 has the period of 2^2 = 4 and looks like this (0011 0011 0011)

* fourier transforms
in (analysis??) you learn that pretty any much any signal can be composed of sine waves at different amplitudes

likewise, any binary signal can be composed of these simple signals.

however, it's not just a sum, but a sum of products product.

* secondary signals
#+scene: sierpinski
#+begin_src j
viewmat 1,~" _ }: |.=/\^:(<32) 32$0
#+end_src
the secondary signals are products of the primary signals

and they form this structure that looks almost exactly like the sierpinski triangle

they're formed by ANDing together every combination of the primary signals


* all other signals
all truth tables of n inputs (that is, all possible sequences of 2^n bits)
can be represented by xoring some combination of the 2^n secondary signals


so n inputs -> n primary signals, 2^n secondary signals
and those combined can make any of the 2^(2^n) truth tables.

* xor trick
given an arbitrary signal (truth table) of 2^n bits
you can break it into secondary signals by performing a repeated xor scan

then the diagonal of the resulting matrix
contains a sequence of ones and zeros that corresponds
exactly to the coefficients of a polynomial whose terms are the secondary binary signals

as it turns out, an xor scan is reversible, so the vector of coefficients
can be put through this same process to get the resulting truth table.

thus there is a bijection between truth tables in disjunctive normal form, and polynomials in algebraic normal form.
