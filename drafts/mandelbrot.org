#+title: mandelbrot set demo

* promise
Here it is. One line of code to generaAte this picture of the mandelbrot set in J.

I promise you, if you watch to the end of this video,
you'll understand exactly what this line is doing.

Let's go to the console to see how it works.

* 1 line version

: NB. (16b221111*i.8) viewmat |:+/2<|(+*:)^:(<9)~_1+j./~ 0.01*i:175 [ load'viewmat'

J executes right to left.

So this part on the right is just loading a tool called viewmat that lets you view matrices as images.

Normally it pops up a new window but I've got my own version that puts the results directly in the console.

: load'tangentstorm/j-kvm/vm'

So then we change viewmat to vm,
and also we have fewer pixels to work with, so I'll reduce these two numbers to change the resolution.

: . ^^0xxxxw>>xxx>xxw>>>x>>>>>xK?6?
: (16b221111*i.8) vm |:+/2<|(+*:)^:(<9)~_1+j./~ 0.1*i:16

Other than that, it's the same image.

* derivation
** complex plane

lowercase i-colon generates a range of numbers in both the positive and negative directions.

: . ?i:4?
: i:4

The asterisk is just plain old multiplication.

: . ^0?0.1 * ?
: 0.1 * i:4

J-dot goes between two numbers to create a complex number.
Forward slash tilde creates a table. So this is like an addition table
using our range as input, but the right argument is imaginary.

: . ^0_?j./~ ?
: j./~ 0.1 * i:4
: . 
: 

If we visualize that with viewmat, we see this rainbow circle.

: . ^^_0___?vm ?
: vm j./~ 0.1 * i:4

[ actually the real viewmat draws nice flow arrows for complex numbers, but the terminal doesn't do that ]

We can make it bigger:

: . ^_X__?16?
: vm j./~ 0.1 * i:16

** colors

Viewmat can take a palette on the left. The bytes are in blue-green-red order,
so this makes some shades of blue.

: . ^_0_?()?__? ?<<___?16b221111 ?_?* i.8?
: (16b221111 * i.8) vm j./~ 0.1 * i:16

Lowercase I-dot is just another range, but doesn't include the negatives.
And we just multiply by this hex number to get the gradient.
: . ^0?hfd ?xwwwxXK
: hfd 16b221111 * i.8
: . ^^bbbbK? i.8?
: (16b221111 * i.8) vm i.8

** the mandlebrot set
*** repeated powers

For the mandelbrot set itself, we're using this formula:

: NB. Z[i] = Z[i-1]^2 + Z[0]

We can tranzlate that in j as:

: {{ (y^2) + z0 }} z0 =: 1

This is a function that takes an argument named y, squares it, and adds z0, which we've defined as one.

So when you square one and add one you get two.

To do it multiple times, we can use the power conjunction:

: . ^bbb?^:5?
: {{ (y^2) + z0 }}^:5 z0 =: 1

And to see the interemediate results, we can put a box around the number 5.

: <5
: . ^^bbb<?(<?>?)?
: {{ (y^2) + z0 }}^:(<5) z0 =: 1

Notice that we have five results, but the first one is just the original number.
So if we want to actually see the result of doing this 5 times, we need to pass in 6.

: . ^___<__<_<_<_<_<_<_<_<_<__x__?6?
: {{ (y^2) + z0 }}^:(<6) z0 =: 1


Again, j executes right to left so we can drop these parentheses by swapping the arguments to plus:

: . ^bbbbXXXXXX<<<X?z0 + ?
: {{ z0 + y^2 }}^:(<6) z0 =: 1

So here y is like an accumulator, and z0 is the initial value. Whenever you've got this
pattern where you need an accumululator and and a constant, you can put the
constant on the left, call it x inside the function, and the power conjunction
will do what you want:

: . ^bbbbbbXX?x?0 ?z0 ?
: z0 {{ x + y^2 }}^:(<6) z0 =: 1

And whenever you have the same argument on  the left and right, you can just put a tilde after the verb
rather than specifying the argument twice.

: . ^bbb?~?0xxx
: {{ x + y^2 }}^:(<6)~ z0 =: 1

And now we don't even need to give z0 a name.

: 
: NB. 'v~ y' means 'y v y'
: . ^^^bbbxxxxxx
: {{ x + y^2 }}^:(<6)~ 1

Better yet, whenever you have this pattern of a constant plus some verb applied to the y argument, you can use a hook.
So first, let's use the special verb for square:

: 
: NB. '*:y' means 'y*y'
: . ^^^bbXXb>?*: ?
: {{ x + *: y }}^:(<6)~ 1

: 
: NB. 'x (u v) y'  means 'x u (v y)'
: . ^^^bbxxx?)?bxxbbbxx0xxx?(
: (+ *:)^:(<6)~ 1

*** examples
Okay, so that's the formula used in the mandelbrot set.
The set itself has to do with how each initial value behaves.
Notice how starting with one very quickly takes you to a big number.

With zero you get a different story:

: . ^__X__?0?0>>x
: (+*:)^:(<6)~ 0

It just stays zero forever.

With negative one, it bounces back and forth between zero and negative one.

: . ^_X_?_1?
: (+*:)^:(<6)~ _1

And with negative two, you get a never-ending sequence of twos.
Two squared is four, plus negative two is two, and so on forever.

: . ^__X_?2?
: (+*:)^:(<6)~ _2

With negative 3, it's straight back to infinity.

: . ^__X_?3?
: (+*:)^:(<6)~ _3

The mandelbrot set is just the part of the complex plane
that works like these numbers,
and not the ones that go off to infinity.

Sometimes it's a little hard to tell. 0.3, looks like it's staying pretty small, but give
it a little more time, and it's out of here.

: . ^__X___?9?__X_X_?0?_?.?__?3?
: (+*:)^:(<6)~ 0.3
: . ^___h_h_h_h_h_h_h__x___?1?_?5?
: (+*:)^:(<15)~ 0.3

*** convergence / divergence

So a decent test is to let the function run a few times for each point,
and then check whether the value is greater than 2.

: . ^___0___?2?____?<?
: 2<(+*:)^:(<15)~ 0.3

Of course you can't just compare complex numbers because they're not well ordered.

: . ^___X_X__?j?__?1?
: 2<(+*:)^:(<15)~ 0j1

: . ^0>>?|?
: 2<|(+*:)^:(<15)~ 0j1
: . ^___0__x__x_x
: (+*:)^:(<15)~ 0j1

But we can use the distance from the origin, which is the vertical bar:

: . ^__0__?|?
: |(+*:)^:(<15)~ 0j1
: . ^0?2<?
: 2<|(+*:)^:(<15)~ 0j1

So that's the mandelbrot function. I tend to run it 9 times in J, even though it's not as precise,
just because otherwise you start hitting infinity and then you have to deal with that.

And now we can apply this same sequence to that entire table of complex numbers we created earlier.

: . ^0?vm ?w<XXXXX?9?>>K?j./~ 0.1 * i:16?
: vm 2<|(+*:)^:9~ j./~ 0.1 * i:16

So there's the mandelbrot set.
The comparison always gives us either a one or zero, and so viewmat just draws it in black and white.

And our table is oriented the wrong way, so let's transpose it.

: . ^0>>>?|:?
: vm |:2<|(+*:)^:9~ j./~ 0.1 * i:16

It's actually still upside down, but since it happens to be symmetrical, we won't worry about it.

But we can move the camera left just by subtracting one from all the values.

: . ^bbbb>?_1+ ?
: vm |:2<|(+*:)^:9~ _1+ j./~ 0.1 * i:16

*** sprite sheet

So the black part actually is the mandelbrot set, but it's traditional to draw some colors
to indicate how long the white part took to break away from black hole.

So to show how that works, I'm going to scale the image down for a moment.

: . ^_XX?8?_<<_<<<<<x?2?
: vm |:2<|(+*:)^:9~ _1+ j./~ 0.2 * i:8

Now if you recall, we can box this 9 to get the intermediate results.
That's going to give us a 3 dimensional array - nine of these tables.

Viewmat doesn't know how to draw a rank 3 array, but we can use dollar
sign to see the shape:

: . ^bbbbb<<?(<?>?)?__0____xx?$?
: $ |:2<|(+*:)^:(<9)~ _1+ j./~ 0.2 * i:8

Well that's not what we want. The transpose is screwing it up.
So let's remove that for a moment.

: . ^0>>xx
: $ 2<|(+*:)^:(<9)~ _1+ j./~ 0.2 * i:8

Now let's reshape that list of 9 tables into a 3x3 table of tables.

: . ^0>? 3 3 $?
: $ 3 3 $ 2<|(+*:)^:(<9)~ _1+ j./~ 0.2 * i:8

And now we can use comma dot between each array to stitch them together.

: . ^0>>?,./ ?
: $ ,./ 3 3 $ 2<|(+*:)^:(<9)~ _1+ j./~ 0.2 * i:8

And again to get a single image with all 9 sub-images.

: . ^0>>?,./?
: $ ,./,./ 3 3 $ 2<|(+*:)^:(<9)~ _1+ j./~ 0.2 * i:8

And now we can visualize it again:

: . ^0x?vm?
: vm ,./,./ 3 3 $ 2<|(+*:)^:(<9)~ _1+ j./~ 0.2 * i:8

And put the transpose back:

: . ^0w? |:?
: vm |: ,./,./ 3 3 $ 2<|(+*:)^:(<9)~ _1+ j./~ 0.2 * i:8

But now that we can see the intermediate steps,
what we really want to do is just add all these tables of ones and zeros together.

*** gradients

So for example, this area on the left is white from the very beginning, and so when
we add all 9 layers, these should wind up as 9, and the parts in the middle that
are close to zero should be 0, and then the parts that change should have different
numbers in between.

: . ^0__xx_x__>>>_xxxxx_?+?__>>_xxxxxx
: |: +/ 2<|(+*:)^:(<9)~ _1+ j./~ 0.2 * i:8

All that's left is to render the image...

: . ^0?vm ?
: vm |: +/ 2<|(+*:)^:(<9)~ _1+ j./~ 0.2 * i:8

And pick whatever color scheme we'd like.

: . ^0?(16b221111 * i.8) ?
: (16b221111 * i.8) vm |: +/ 2<|(+*:)^:(<9)~ _1+ j./~ 0.2 * i:8

* end

Of course we can get as fancy as we like with the colors, and modify
these constants to pan and zoom the camera, but that's
a story for another day.

Until then, if you liked video, please press the thumbs up
button and let youtube know.

If you want more on the math behind the mandelbrot set,
you should check this out.

Or maybe try this other video that youtube thinks
you're going to like.
